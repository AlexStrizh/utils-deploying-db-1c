#Использовать cli
#Использовать fs
#Использовать TMSSQL

#Область ГлобальныеПеременные

Перем Лог;
перем ПараметрыПодключения;
#КонецОбласти 

Процедура ВыполнитьПриложение()
	
	Приложение = Новый КонсольноеПриложение("ssajm", "SQL Server Agent Jobs Manager - сбор информации и управление заданиями.");
	Приложение.Версия("v version", "1.0.0");

	Приложение.Аргумент("SERVER", "", "ip адрес MS SQL Server 2012")
					.ТСтрока()
					.ПоУмолчанию(Ложь)
					.ВОкружении("SSAJM_SERVER");

	Приложение.Аргумент("JOBS", "", "перечень заданий (jobs) разделенных запятыми")
					.ТСтрока()
					.ПоУмолчанию(Ложь)
					.ВОкружении("SSAJM_JOBS");

	Приложение.Опция("f file", "", "файл с перечнем заданий (jobs), каждое задание на новой строке")
					.ТСтрока()
					.ПоУмолчанию(Ложь);

	Приложение.Опция("s started", "", "проверка заданий на запуск")
					.ТБулево()
					.ПоУмолчанию(Ложь);

	Приложение.Опция("l last", "", "проверка на успешность завершенных заданий")
					.ТБулево()
					.ПоУмолчанию(Ложь);

	Приложение.УстановитьСпек("[-s] | [-l] (-f SERVER) | (SERVER JOBS)");

	Приложение.УстановитьОсновноеДействие(ЭтотОбъект);
	Приложение.Запустить(АргументыКоманднойСтроки);

КонецПроцедуры

Функция ПолучитьЗаданияИзАргумента(Знач ЗначениеАргумента)
	Лог.Отладка("Получаем задания из аргумента...");

	МассивСинонимовЗаданий = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(ЗначениеАргумента, , Истина, Истина);
	Лог.Отладка("Количество элементов в массиве синонимов заданий: %1", МассивСинонимовЗаданий.Количество());

	Возврат МассивСинонимовЗаданий;
КонецФункции

Функция ПолучитьЗаданияИзФайла(Знач ИмяФайла)
	Лог.Отладка("Получаем задания из файла...");

	ПолныйПуть = ФС.ПолныйПуть(ИмяФайла);

	Если НЕ ФС.ФайлСуществует(ПолныйПуть) Тогда
		ВызватьИсключение СтрШаблон("Файла с заданиями не существует: %1", ПолныйПуть);
	КонецЕсли;

	Файл = Новый ЧтениеТекста(ПолныйПуть, "utf-8");
	
	МассивСинонимовЗаданий = Новый Массив;
	Строка = Файл.ПрочитатьСтроку();

	Пока Строка <> Неопределено Цикл
		МассивСинонимовЗаданий.Добавить(Строка);
		Строка = Файл.ПрочитатьСтроку();
	КонецЦикла;

	Файл.Закрыть();

	Лог.Отладка("Количество синонимов заданий в файле: %1", МассивСинонимовЗаданий.Количество());

	Возврат МассивСинонимовЗаданий;

КонецФункции

Функция ПолучитьПроверяемыеЗадания(Знач Команда)

	ЗаданияИзАргумента 	= Команда.ЗначениеАргумента("JOBS");
	ЗаданияИзФайла 		= Команда.ЗначениеОпции("file");

	Лог.Отладка("Файл с заданиями: %1", ЗаданияИзФайла);
	Лог.Отладка("Список заданий: %1", ЗаданияИзАргумента);

	Возврат ?(ТипЗнч(ЗаданияИзАргумента) <> Тип("Булево"),
					ПолучитьЗаданияИзАргумента(ЗаданияИзАргумента),
					ПолучитьЗаданияИзФайла(ЗаданияИзФайла));

КонецФункции

Функция ИнициализироватьУправлениеMSSQL(Знач Сервер)

	УправлениеMSSQL = Новый УправлениеMSSQL();
	ПараметрыПодключения = УправлениеMSSQL.ПараметрыПодключения;
	
	ПараметрыПодключения.АдресСервераSQL = Сервер;
	ПараметрыПодключения.ИмяБазыДанныхSQL = "msdb";

	Возврат УправлениеMSSQL;

КонецФункции

Функция ПолучитьДанныеССервераSQL(Знач УправлениеMSSQL)
	
	Результат = УправлениеMSSQL.ВыполнитьЗапрос("EXEC msdb.dbo.sp_help_job;", "msdb", Истина);
	Возврат Результат;

КонецФункции

Функция СформироватьТаблицуРезультатов(Знач РезультатЗапроса)

	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Имя"); 							// Name
	ТаблицаЗначений.Колонки.Добавить("Доступность"); 					// Enabled (0 = отключен, 1 = включен)
	ТаблицаЗначений.Колонки.Добавить("Статус");							// Status (1 = выполняется, 4 = в ожидании)
	ТаблицаЗначений.Колонки.Добавить("РезультатПоследнегоЗапуска");		// Last Run Outcome (1 = Succeeded)
	
	Попытка 
		Если РезультатЗапроса.BOF = Ложь Тогда
			РезультатЗапроса.MoveFirst();
			Пока РезультатЗапроса.EOF = Ложь Цикл
				НоваяСтрока = ТаблицаЗначений.Добавить();
				НоваяСтрока.Имя 						= РезультатЗапроса.Fields("name").Value;
				НоваяСтрока.Доступность 				= РезультатЗапроса.Fields("enabled").Value;
				НоваяСтрока.Статус 						= РезультатЗапроса.Fields("current_execution_status").Value;
				НоваяСтрока.РезультатПоследнегоЗапуска 	= РезультатЗапроса.Fields("last_run_outcome").Value;

				Лог.Отладка("name: %1", НоваяСтрока.Имя);
				Лог.Отладка("enabled: %1", НоваяСтрока.Доступность);
				Лог.Отладка("current_execution_status: %1", НоваяСтрока.Статус);
				Лог.Отладка("last_run_outcome: %1", НоваяСтрока.РезультатПоследнегоЗапуска);
				РезультатЗапроса.MoveNext();
			КонецЦикла;
		КонецЕсли;
	Исключение
		ТаблицаЗначений.Очистить();
	КонецПопытки;

	Возврат ТаблицаЗначений;

КонецФункции

Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	Сервер = Команда.ЗначениеАргумента("SERVER");
	Лог.Отладка("Сервер: %1", Сервер);

	МассивПроверямыхЗаданий = ПолучитьПроверяемыеЗадания(Команда);

	Если НЕ ЗначениеЗаполнено(МассивПроверямыхЗаданий) Тогда
		ВызватьИсключение СтрШаблон("Не удалось получить перечень проверяемых заданий.");
	КонецЕсли;
	
	УправлениеMSSQL = ИнициализироватьУправлениеMSSQL(Сервер);

	Попытка
		РезультатЗапроса = ПолучитьДанныеССервераSQL(УправлениеMSSQL);
	Исключение
		ВызватьИсключение СтрШаблон("Ошибка вызова запросов и процедур на сервере SQL.");
	КонецПопытки;

	Если РезультатЗапроса = Неопределено Тогда
		ЗавершитьРаботу(0); // Это не ошибка, так как заданий может не быть вообще.
	КонецЕсли;

	ТаблицаЗначений = СформироватьТаблицуРезультатов(РезультатЗапроса);

	Если ТаблицаЗначений.Количество() = 0 Тогда
		ЗавершитьРаботу(1); // Что-то пошло не так...
	КонецЕсли;
	
	Для каждого ТекущееЗадание Из МассивПроверямыхЗаданий Цикл

		Задание = ТаблицаЗначений.Найти(ТекущееЗадание, "Имя");

		Если Задание = Неопределено Тогда
			Лог.Отладка("Искали задание %1 и не нашли.", ТекущееЗадание);
			ВызватьИсключение СтрШаблон("На сервере SQL отсутствует задание: %1", ТекущееЗадание);
		КонецЕсли;

		Лог.Отладка("Описание задания <%1>:", Задание.Имя);
		Лог.Отладка("	доступность: %1", Задание.Доступность);
		Лог.Отладка("	статус: %1", Задание.Статус);
		Лог.Отладка("	результат последнего запуска: %1", Задание.РезультатПоследнегоЗапуска);

		МассивНеВыполняющихсяЗаданий 		= Новый Массив;
		МассивВыполненныхУспешноЗаданий 	= Новый Массив;

		Если Задание.Доступность = 1 Тогда
			Лог.Информация("Задание: %1", Задание.Имя);
			Если Задание.Статус <> 1 Тогда
				МассивНеВыполняющихсяЗаданий.Добавить(Задание);
				Лог.Информация("	не выполняется.");
			Иначе
				Лог.Информация("	выполняется.");
			КонецЕсли;

			Если Задание.РезультатПоследнегоЗапуска = 1 и Задание.Статус <> 1 Тогда
				МассивВыполненныхУспешноЗаданий.Добавить(Задание);
				Лог.Информация("	последний запуск был успешен.");
			Иначе
				Лог.Информация("	последний запуск НЕ был успешным.");
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	ЭтоПроверкаЗапущенныхЗаданий 		= Команда.ЗначениеОпции("started");
	ЭтоПроверкаУспешностиВыполненных 	= Команда.ЗначениеОпции("last");

	Лог.Отладка("Это проверка запущенных заданий: %1", ЭтоПроверкаЗапущенныхЗаданий);
	Лог.Отладка("Это проверка успешности выполненных: %1", ЭтоПроверкаУспешностиВыполненных);

	Если ЭтоПроверкаЗапущенныхЗаданий И ЗначениеЗаполнено(МассивНеВыполняющихсяЗаданий) Тогда
		Лог.КритичнаяОшибка("ВНИМАНИЕ! Не были запущены необходимые регламентные задания.");
	КонецЕсли;

	Если ЭтоПроверкаУспешностиВыполненных Тогда
		Если ЗначениеЗаполнено(МассивВыполненныхУспешноЗаданий)
			И (МассивВыполненныхУспешноЗаданий.Количество() <> МассивПроверямыхЗаданий.Количество()) Тогда
				Лог.КритичнаяОшибка("ВНИМАНИЕ! Не все необходимые задания выполнены, либо были проблемы при их выполнении.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяПриложения() Экспорт

	Возврат "ssajm";
		
КонецФункции

Лог = Логирование.ПолучитьЛог("oscript.app." + ИмяПриложения());
Лог.УстановитьУровень(УровниЛога.Отладка);

Попытка
	
	ВыполнитьПриложение();
	
Исключение
	
	Лог.КритичнаяОшибка(ОписаниеОшибки());
	
	ЗавершитьРаботу(1);
	
КонецПопытки;