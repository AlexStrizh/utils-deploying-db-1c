#Использовать cli
#Использовать sql

#Область ГлобальныеПеременные

Перем Лог;

#КонецОбласти 

Процедура ВыполнитьПриложение()
	
	Приложение = Новый КонсольноеПриложение("ssajm", "SQL Server Agent Jobs Manager - сбор информации и управление заданиями.");
	Приложение.Версия("v version", "1.0.0");

	Приложение.Аргумент("SERVER", "", "ip адрес MS SQL Server 2012")
					.ТСтрока()
					.ПоУмолчанию(Ложь)
					.ВОкружении("SSAJM_SERVER");

	Приложение.Аргумент("JOBS", "", "перечень заданий (jobs) разделенных запятыми")
					.ТСтрока()
					.ПоУмолчанию(Ложь)
					.ВОкружении("SSAJM_JOBS");

	Приложение.Опция("f file", "", "файл с перечнем заданий (jobs), каждое задание на новой строке")
					.ТСтрока()
					.ПоУмолчанию(Ложь);
					Приложение.УстановитьСпек("SERVER (JOBS | -f)");

	Приложение.УстановитьОсновноеДействие(ЭтотОбъект);
	Приложение.Запустить(АргументыКоманднойСтроки);

КонецПроцедуры

Функция ПолучитьЗаданияИзАргумента(Знач ЗначениеАргумента)
	Лог.Отладка("Получаем задания из аргумента...");
	МассивСинонимовЗаданий = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(ЗначениеАргумента, , Истина);
	Лог.Отладка("Количество элементов в массиве синонимов заданий: %1", МассивСинонимовЗаданий.Количество());

Для каждого Переменная Из МассивСинонимовЗаданий Цикл
	Лог.Отладка(Переменная);
КонецЦикла;

	Возврат "";
КонецФункции

Функция ПолучитьЗаданияИзФайла(Знач ИмяФайла)
	Лог.Отладка("Получаем задания из файла...");
	Возврат "";
КонецФункции

Функция ПроверяемыеЗадания(Знач Команда)

	ЗаданияИзАргумента 	= Команда.ЗначениеАргумента("JOBS");
	ЗаданияИзФайла 		= Команда.ЗначениеОпции("file");

	Лог.Отладка("Файл с заданиями для проверки: %1", ЗаданияИзФайла);
	Лог.Отладка("Список заданий для проверки: %1", ЗаданияИзАргумента);

	Возврат ?(ТипЗнч(ЗаданияИзАргумента) <> Тип("Булево"),
					ПолучитьЗаданияИзАргумента(ЗаданияИзАргумента),
					ПолучитьЗаданияИзФайла(ЗаданияИзФайла));

КонецФункции

Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	Сервер = Команда.ЗначениеАргумента("SERVER");
	Лог.Отладка("Сервер: %1", Сервер);

	МассивПроверямыхЗаданий = ПроверяемыеЗадания(Команда);


	
	Соединение = Новый Соединение();
	Соединение.ТипСУБД = Соединение.ТипыСУБД.MSSQLServer;
	Соединение.Сервер = Сервер;
	Соединение.ИмяБазы = "msdb";

	Попытка
		Соединение.Открыть();
	Исключение
		ВызватьИсключение СтрШаблон("Ошибка соединения с базой данных: %1", Сервер);
	КонецПопытки;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьСоединение(Соединение);
	Запрос.Текст = "SELECT sj.Name, 
	|CASE
	|	WHEN sja.start_execution_date IS NULL THEN 'Not running'
	|	WHEN sja.start_execution_date IS NOT NULL AND sja.stop_execution_date IS NULL THEN 'Running'
	|	WHEN sja.start_execution_date IS NOT NULL AND sja.stop_execution_date IS NOT NULL THEN 'Not running'
	|END AS 'RunStatus'
	|FROM msdb.dbo.sysjobs sj
	|JOIN msdb.dbo.sysjobactivity sja
	|ON sj.job_id = sja.job_id
	|WHERE session_id = (
	|SELECT MAX(session_id) FROM msdb.dbo.sysjobactivity); ";
	//ЗапросВставка.УстановитьПараметр("name", "Игорь2");
	//ЗапросВставка.ВыполнитьКоманду();
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из ТЗ Цикл
		Сообщить(Стр.Name)
	КонецЦикла;
	

	
КонецПроцедуры

Функция ИмяПриложения() Экспорт

	Возврат "ssajm";
		
КонецФункции

Лог = Логирование.ПолучитьЛог("oscript.app." + ИмяПриложения());

Попытка
	
	ВыполнитьПриложение();
	
Исключение
	
	Лог.КритичнаяОшибка(ОписаниеОшибки());
	
	ЗавершитьРаботу(1);
	
КонецПопытки;