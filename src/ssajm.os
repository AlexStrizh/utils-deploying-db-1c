#Использовать cli
#Использовать sql
#Использовать fs

#Область ГлобальныеПеременные

Перем Лог;

#КонецОбласти 

Процедура ВыполнитьПриложение()
	
	Приложение = Новый КонсольноеПриложение("ssajm", "SQL Server Agent Jobs Manager - сбор информации и управление заданиями.");
	Приложение.Версия("v version", "1.0.0");

	Приложение.Аргумент("SERVER", "", "ip адрес MS SQL Server 2012")
					.ТСтрока()
					.ПоУмолчанию(Ложь)
					.ВОкружении("SSAJM_SERVER");

	Приложение.Аргумент("JOBS", "", "перечень заданий (jobs) разделенных запятыми")
					.ТСтрока()
					.ПоУмолчанию(Ложь)
					.ВОкружении("SSAJM_JOBS");

	Приложение.Опция("f file", "", "файл с перечнем заданий (jobs), каждое задание на новой строке")
					.ТСтрока()
					.ПоУмолчанию(Ложь);
					Приложение.УстановитьСпек("SERVER (JOBS | -f)");

	Приложение.УстановитьОсновноеДействие(ЭтотОбъект);
	Приложение.Запустить(АргументыКоманднойСтроки);

КонецПроцедуры

Функция ПолучитьЗаданияИзАргумента(Знач ЗначениеАргумента)
	Лог.Отладка("Получаем задания из аргумента...");

	МассивСинонимовЗаданий = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(ЗначениеАргумента, , Истина, Истина);
	Лог.Отладка("Количество элементов в массиве синонимов заданий: %1", МассивСинонимовЗаданий.Количество());

	Возврат МассивСинонимовЗаданий;
КонецФункции

Функция ПолучитьЗаданияИзФайла(Знач ИмяФайла)
	Лог.Отладка("Получаем задания из файла...");

	ПолныйПуть = ФС.ПолныйПуть(ИмяФайла);

	Если НЕ ФС.ФайлСуществует(ПолныйПуть) Тогда
		ВызватьИсключение СтрШаблон("Файла с заданиями не существует: %1", ПолныйПуть);
	КонецЕсли;

	Файл = Новый ЧтениеТекста(ПолныйПуть, "utf-8");
	
	МассивСинонимовЗаданий = Новый Массив;
	Строка = Файл.ПрочитатьСтроку();

	Пока Строка <> Неопределено Цикл
		МассивСинонимовЗаданий.Добавить(Строка);
		Строка = Файл.ПрочитатьСтроку();
	КонецЦикла;

	Файл.Закрыть();

	Лог.Отладка("Количество синонимов заданий в файле: %1", МассивСинонимовЗаданий.Количество());

	Возврат МассивСинонимовЗаданий;

КонецФункции

Функция ПолучитьПроверяемыеЗадания(Знач Команда)

	ЗаданияИзАргумента 	= Команда.ЗначениеАргумента("JOBS");
	ЗаданияИзФайла 		= Команда.ЗначениеОпции("file");

	Лог.Отладка("Файл с заданиями: %1", ЗаданияИзФайла);
	Лог.Отладка("Список заданий: %1", ЗаданияИзАргумента);

	Возврат ?(ТипЗнч(ЗаданияИзАргумента) <> Тип("Булево"),
					ПолучитьЗаданияИзАргумента(ЗаданияИзАргумента),
					ПолучитьЗаданияИзФайла(ЗаданияИзФайла));

КонецФункции

Функция ПолучитьСоединение(Знач Сервер)

	Соединение = Новый Соединение();
	Соединение.ТипСУБД = Соединение.ТипыСУБД.MSSQLServer;
	Соединение.Сервер = Сервер;
	Соединение.ИмяБазы = "msdb";

	Попытка
		Соединение.Открыть();
	Исключение
		ВызватьИсключение СтрШаблон("Ошибка соединения с базой данных: %1", Сервер);
	КонецПопытки;

	Возврат Соединение;

КонецФункции

Функция ПолучитьДанныеССервераSQL(Знач Соединение)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьСоединение(Соединение);
	Запрос.Текст = "exec sp_help_job;";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции


Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	Сервер = Команда.ЗначениеАргумента("SERVER");
	Лог.Отладка("Сервер: %1", Сервер);

	МассивПроверямыхЗаданий = ПолучитьПроверяемыеЗадания(Команда);

	Если НЕ ЗначениеЗаполнено(МассивПроверямыхЗаданий) Тогда
		ВызватьИсключение СтрШаблон("Не удалось получить перечень проверяемых заданий.");
	КонецЕсли;
	
	Попытка
		Соединение = ПолучитьСоединение(Сервер);	
	Исключение
		ВызватьИсключение; // проброс исключения
	КонецПопытки;
	
	Попытка
		ТЗ = ПолучитьДанныеССервераSQL(Соединение);
		Соединение.Закрыть();
	Исключение
		Попытка
			Соединение.Закрыть();
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
		ВызватьИсключение СтрШаблон("Ошибка вызова запросов и процедур на сервере SQL.");

	КонецПопытки;
	
	Если ТЗ.Количество() = 0 Тогда
		ЗавершитьРаботу(0); // Это не ошибка, так как заданий может не быть вообще.
	КонецЕсли;

	Для каждого ТекущееЗадание Из МассивПроверямыхЗаданий Цикл
		Задание = ТЗ.Найти(ТекущееЗадание, "name");

		Если Задание = Неопределено Тогда
			Лог.Отладка("Искали задание %1 и не нашли.", ТекущееЗадание);
			Продолжить;
		КонецЕсли;

		Лог.Отладка("Найдено задание: %1", Задание["name"]);
		Лог.Отладка("Найдено enabled: %1", Задание["enabled"]);
		

		МассивНеВыполняющихсяЗаданий 	= Новый Массив;
		МассивВыполненныхУспешноЗаданий = Новый Массив;

		Если Задание["enabled"] = 1 Тогда
			Если Задание["current_execution_status"] <> 1 Тогда
				МассивНеВыполняющихсяЗаданий.Добавить(Задание);
				Лог.Отладка("	Задание не выполняется.");
			КонецЕсли;

			Лог.Отладка(ТекущаяДата());
			Если Задание["last_run_outcome"] = 1 Тогда
				МассивВыполненныхУспешноЗаданий.Добавить(Задание);
				Лог.Отладка("	Задание уже успешно выполнено.");
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Функция ИмяПриложения() Экспорт

	Возврат "ssajm";
		
КонецФункции

Лог = Логирование.ПолучитьЛог("oscript.app." + ИмяПриложения());
Лог.УстановитьУровень(УровниЛога.Отладка);

Попытка
	
	ВыполнитьПриложение();
	
Исключение
	
	Лог.КритичнаяОшибка(ОписаниеОшибки());
	
	ЗавершитьРаботу(1);
	
КонецПопытки;