#Использовать v8runner
#Использовать cmdline
#Использовать logos
#Использовать params

Перем Лог;
Перем ОбщиеМетоды;
Перем ПутьКМенеджеруСпискаБаз;
Перем ПараметрыСистемы;

Процедура Инициализация()
	Лог = Логирование.ПолучитьЛог("petrovich.app.utils");
	Лог.УстановитьУровень(УровниЛога.Информация);
	//СистемнаяИнформация = Новый СистемнаяИнформация;

	ПараметрыСистемы = Новый Структура;
	ПараметрыСистемы.Вставить("КорневойПутьПроекта", "");
	
КонецПроцедуры

Функция УстановитьКаталогТекущегоПроекта(Знач Путь)
	Рез = "";
	Если ПустаяСтрока(Путь) Тогда
		Попытка
			Команда = Новый Команда;
			Команда.УстановитьСтрокуЗапуска("git rev-parse --show-toplevel");
			Команда.УстановитьПравильныйКодВозврата(0);
			Команда.Исполнить();
			Рез = СокрЛП(Команда.ПолучитьВывод());
			// Рез = СокрЛП(ЗапуститьПроцесс("git rev-parse --show-toplevel"));
		Исключение
		КонецПопытки;
	Иначе
		Рез = Путь;
	КонецЕсли;
	Возврат Рез;
КонецФункции // УстановитьКаталогТекущегоПроекта()

Функция СоответствиеПеременныхОкруженияПараметрамКоманд()	
	СоответствиеПеременных = Новый Соответствие();

	СоответствиеПеременных.Вставить("RUNNER_IBCONNECTION", "--ibconnection");
	СоответствиеПеременных.Вставить("RUNNER_IBNAME", "--ibname");
	СоответствиеПеременных.Вставить("RUNNER_DBUSER", "--db-user");
	СоответствиеПеременных.Вставить("RUNNER_DBPWD", "--db-pwd");
	СоответствиеПеременных.Вставить("RUNNER_v8version", "--v8version");
	СоответствиеПеременных.Вставить("RUNNER_uccode", "--uccode");
	СоответствиеПеременных.Вставить("RUNNER_command", "--command");
	СоответствиеПеременных.Вставить("RUNNER_execute", "--execute");
	СоответствиеПеременных.Вставить("RUNNER_storage-user", "--storage-user");
	СоответствиеПеременных.Вставить("RUNNER_storage-pwd", "--storage-pwd");
	СоответствиеПеременных.Вставить("RUNNER_storage-ver", "--storage-ver");
	СоответствиеПеременных.Вставить("RUNNER_storage-name", "--storage-name");
	СоответствиеПеременных.Вставить("RUNNER_ROOT", "--root");
	СоответствиеПеременных.Вставить("RUNNER_WORKSPACE", "--workspace");
	СоответствиеПеременных.Вставить("RUNNER_PATHVANESSA", "--pathvanessa");
	СоответствиеПеременных.Вставить("RUNNER_PATHXUNIT", "--pathxunit");
	СоответствиеПеременных.Вставить("RUNNER_VANESSASETTINGS", "--vanessasettings");
	СоответствиеПеременных.Вставить("RUNNER_NOCACHEUSE", "--nocacheuse");
	СоответствиеПеременных.Вставить("RUNNER_LOCALE", "--locale");
	СоответствиеПеременных.Вставить("RUNNER_LANGUAGE", "--language");
	
	Возврат Новый ФиксированноеСоответствие(СоответствиеПеременных);
КонецФункции

Функция РезультатыКоманд()

	РезультатыКоманд = Новый Структура;
	РезультатыКоманд.Вставить("Успех", 0);
	РезультатыКоманд.Вставить("НеверныеПараметры", 5);
	РезультатыКоманд.Вставить("ОшибкаВремениВыполнения", 1);
	
	Возврат РезультатыКоманд;

КонецФункции // РезультатыКоманд

Функция РазобратьАргументыКоманднойСтроки()

	Лог.Отладка("Определяем параметры подключения.");
	Парсер = ПолучитьПарсерКоманднойСтроки();
	Возврат Парсер.Разобрать(АргументыКоманднойСтроки);
	
КонецФункции // РазобратьАргументыКоманднойСтроки

Функция ПолучитьПарсерКоманднойСтроки()
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();

	КомандаKick = Парсер.ОписаниеКоманды("kick");

	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаKick, "--root");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаKick, "--ibconnection");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаKick, "--db-user");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаKick, "--db-pwd");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаKick, "--uccode");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаKick, "--try");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаKick, "--lockstart");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаKick, "--lockstop");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаKick, "--uccode");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаKick, "--lockmessage");

	КомандаLock = Парсер.ОписаниеКоманды("lock");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаLock, "--root");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаLock, "--ibconnection");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаLock, "--db-user");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаLock, "--db-pwd");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаLock, "--lockstart");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаLock, "--lockstop");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаLock, "--uccode");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаLock, "--lockmessage");

	КомандаUnlock = Парсер.ОписаниеКоманды("unlock");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаUnlock, "--root");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаUnlock, "--ibconnection");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаUnlock, "--db-user");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаUnlock, "--db-pwd");
	Парсер.ДобавитьИменованныйПараметрКоманды(КомандаUnlock, "--uccode");

	КаталогПрограммы = КаталогПрограммы();
	КаталогПрограммы = СтрЗаменить(КаталогПрограммы, "bin", "lib");

	Лог.Отладка("Путь к каталогу библиотек OneScript: %1", КаталогПрограммы);

	ПутьКОбщимМетодам = ОбъединитьПути(КаталогПрограммы, "vanessa-runner\src\Модули", "ОбщиеМетоды.os");
	ПутьКМенеджеруСпискаБаз = ОбъединитьПути(КаталогПрограммы, "vanessa-runner\src\Модули", "МенеджерСпискаБаз.os");

	Лог.Отладка("Путь к общим методам: %1", ПутьКОбщимМетодам);
	
	ОбщиеМетоды = ЗагрузитьСценарий(ПутьКОбщимМетодам);
	Парсер.ДобавитьИменованныйПараметр("--settings", "Путь к файлу настроек, в формате json. По умолчанию имя файла " + 
		ОбщиеМетоды.ИмяФайлаНастроек(), Истина);

	Парсер.ДобавитьКоманду(КомандаKick);
	Парсер.ДобавитьКоманду(КомандаLock);
	Парсер.ДобавитьКоманду(КомандаUnlock);

	Возврат Парсер;
	
КонецФункции // ПолучитьПарсерКоманднойСтроки

Функция ИнициализацияПараметровПодключения(Знач СтрокаПодключения)

	Лог.Отладка("Определение параметров подключения.");
	ПортСервера = Неопределено;

	Если Лев(СтрокаПодключения, 2) = "/S" Тогда
		
		МассивСтрокИзСтрокиПодключения = СтроковыеФункции.РазложитьСтрокуВМассивСлов(СтрокаПодключения, "\");

		Если МассивСтрокИзСтрокиПодключения.Количество() <> 2 Тогда
			Лог.Ошибка("Некорректно задан параметр подключения к базе данных.");
			ЗавершитьРаботу(РезультатыКоманд().НеверныеПараметры);				
		КонецЕсли;

		ПолноеИмяСервера 	= Прав(МассивСтрокИзСтрокиПодключения[0], СтрДлина(МассивСтрокИзСтрокиПодключения[0]) - 2);
		ИмяБазы				= МассивСтрокИзСтрокиПодключения[1];

		МассивСтрокИзИмениСервера = СтроковыеФункции.РазложитьСтрокуВМассивСлов(ПолноеИмяСервера, ":");

		Если МассивСтрокИзИмениСервера.Количество() = 2 Тогда
			ИмяСервера = МассивСтрокИзИмениСервера[0];
			ПортСервера = МассивСтрокИзИмениСервера[1];
		Иначе
			ИмяСервера = ПолноеИмяСервера;
		КонецЕсли;

		Лог.Отладка("ПолноеИмяСервера: " + ПолноеИмяСервера);
		Лог.Отладка("ИмяСервера: " + ИмяСервера);
		Лог.Отладка("ПортСервера: " + ПортСервера);
		Лог.Отладка("ИмяБазы: " + ИмяБазы);

	Иначе
		Лог.Ошибка("Некорректно задан параметр подключения к базе данных.");
		ЗавершитьРаботу(РезультатыКоманд().НеверныеПараметры);		
	КонецЕсли;
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("ПолноеИмяСервера", ПолноеИмяСервера);
	ПараметрыПодключения.Вставить("ИмяСервера", ИмяСервера);
	ПараметрыПодключения.Вставить("ПортСервера", ПортСервера);
	ПараметрыПодключения.Вставить("ИмяБазы", ИмяБазы);

Возврат ПараметрыПодключения;

КонецФункции

Процедура ДополнитьЗначенияПараметров(Знач Команда, ЗначенияПараметров)
	Перем ЗначениеПараметраФайлНастроек, ПутьКФайлуНастроекПоУмолчанию, ФайлОбщихНастроек;
	Перем ЗначенияПараметровНизкийПриоритет, СоответствиеПеременных, НастройкиИзФайла;

	ТекущийКаталогПроекта = УстановитьКаталогТекущегоПроекта(ЗначенияПараметров["--root"]);

	Лог.Отладка("Текущий каталог проекта: %1", ТекущийКаталогПроекта);

	ПараметрыСистемы.КорневойПутьПроекта = ТекущийКаталогПроекта;

	ПутьКФайлуНастроекПоУмолчанию = ОбъединитьПути(ТекущийКаталогПроекта, ОбщиеМетоды.ИмяФайлаНастроек());

	Лог.Отладка("Путь к файлу настроек по умолчанию: %1", ПутьКФайлуНастроекПоУмолчанию);

	ЗначениеПараметраФайлНастроек = ЗначенияПараметров["--settings"];
	Если ЗначениеЗаполнено(ЗначениеПараметраФайлНастроек) Тогда
		ФайлОбщихНастроек = Новый Файл(ОбщиеМетоды.ПолныйПуть(ЗначениеПараметраФайлНастроек, ПараметрыСистемы.КорневойПутьПроекта));
		Ожидаем.Что(ФайлОбщихНастроек.Существует(), 
			СтрШаблон("Ожидаем, что указанный в --settings <%1> файл по пути <%2> существует, а его нет!",
				ЗначениеПараметраФайлНастроек,
				ФайлОбщихНастроек.ПолноеИмя)
			).ЭтоИстина();
	КонецЕсли;
	
	НастройкиИзФайла = ОбщиеМетоды.ПрочитатьНастройкиФайлJSON(ТекущийКаталогПроекта, 
			ЗначениеПараметраФайлНастроек, ПутьКФайлуНастроекПоУмолчанию);

	ЗначенияПараметровНизкийПриоритет = Новый Соответствие;

	Если НастройкиИзФайла.Количество() > 0 Тогда 
		ОбщиеМетоды.ДополнитьАргументыИзФайлаНастроек(Команда, ЗначенияПараметровНизкийПриоритет, НастройкиИзФайла);
	КонецЕсли;
	
	СоответствиеПеременных = СоответствиеПеременныхОкруженияПараметрамКоманд();

	ОбщиеМетоды.ЗаполнитьЗначенияИзПеременныхОкружения(ЗначенияПараметровНизкийПриоритет, СоответствиеПеременных);

	ОбщиеМетоды.ДополнитьСоответствиеСУчетомПриоритета(ЗначенияПараметров, ЗначенияПараметровНизкийПриоритет);

	// на случай переопределения этой настройки повторная установка
	УстановитьКаталогТекущегоПроекта(ЗначенияПараметров["--root"]);

	ДобавитьДанныеПодключения(ЗначенияПараметров);
	
КонецПроцедуры //ДополнитьЗначенияПараметров


Процедура ДобавитьДанныеПодключения(ЗначенияПараметров)
	СтрокаПодключения = ЗначенияПараметров["--ibconnection"];
	ИмяБазы = ЗначенияПараметров["--ibname"];

	Если ЗначениеЗаполнено(СтрокаПодключения) И ЗначениеЗаполнено(ИмяБазы) Тогда
		ВызватьИсключение СтрШаблон("Запрещено одновременно задавать ключи %1 и %2", "--ibconnection", "--ibname");
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаПодключения) Тогда
		ЗначенияПараметров.Вставить("--ibname", СтрокаПодключения);
	Иначе
		ЗначенияПараметров.Вставить("--ibconnection", ИмяБазы);

		Если ЗначениеЗаполнено(ИмяБазы) Тогда
			Лог.Предупреждение("------------------------------------------------------------------");
			Лог.Предупреждение("Параметр --ibname устарел. Используйте --ibconnection вместо него!");
			Лог.Предупреждение("------------------------------------------------------------------");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначенияПараметров["--ibname"]) Тогда
		ЗначенияПараметров.Вставить("--ibname", 
						ОбщиеМетоды.ПереопределитьПолныйПутьВСтрокеПодключения(ЗначенияПараметров["--ibname"]));

		ИсходнаяСтрокаПодключения = ЗначенияПараметров["--ibname"];

		Если ПутьКМенеджеруСпискаБаз = Неопределено Тогда
			ВызватьИсключение "Ошибка определения менеджера списка баз.";
		КонецЕсли;

		Инжект = Новый Структура;
		Инжект.Вставить("ОбщиеМетоды", ОбщиеМетоды);
		МенеджерСпискаБаз = ЗагрузитьСценарий(ПутьКМенеджеруСпискаБаз, Инжект);

		НоваяСтрокаПодключения = МенеджерСпискаБаз.ПолучитьСтрокуПодключенияСКэшем(
						ИсходнаяСтрокаПодключения, 
						ЗначенияПараметров["--nocacheuse"]);

		ЗначенияПараметров.Вставить("--ibname", НоваяСтрокаПодключения);
		ЗначенияПараметров.Вставить("--ibconnection", ИсходнаяСтрокаПодключения);

	КонецЕсли;
	ЗначенияПараметров.Вставить("ДанныеПодключения", ДанныеПодключения(ЗначенияПараметров));
	ЗначенияПараметров.Вставить("ДанныеПодключенияCOM", ИнициализацияПараметровПодключения(СтрокаПодключения));
	
КонецПроцедуры

Функция ДанныеПодключения(ЗначенияПараметров)
	СтруктураПодключения = Новый Структура;
	
	// здесь может находиться и имя базы и строка подключения
	СтруктураПодключения.Вставить("СтрокаПодключения", ЗначенияПараметров["--ibname"]);
	
	// здесь может находиться только строка подключения в виде пути к базе
	СтруктураПодключения.Вставить("ПутьБазы", ЗначенияПараметров["--ibconnection"]); 
	СтруктураПодключения.Вставить("Пользователь", ЗначенияПараметров["--db-user"]);
	СтруктураПодключения.Вставить("Пароль", ЗначенияПараметров["--db-pwd"]);
	СтруктураПодключения.Вставить("КодЯзыка", ЗначенияПараметров["--language"]);
	СтруктураПодключения.Вставить("КодЯзыкаСеанса", ЗначенияПараметров["--locale"]);

	Рез = Новый Структура;
	Для каждого КлючЗначение Из СтруктураПодключения Цикл
		Значение = КлючЗначение.Значение;
		Если Значение = Неопределено Тогда
			Значение = "";
		КонецЕсли;
		Рез.Вставить(КлючЗначение.Ключ, Значение);
	КонецЦикла;

	Возврат Новый ФиксированнаяСтруктура(Рез);
КонецФункции // ДанныеПодключения(ЗначенияПараметров)

Функция ПолучитьСписокСеансов(Агент, ПортСервера, ИмяБазы, ИмяАдминистратораИБ, ПарольАдминистратораИБ, ИмяАдминистратораКластера, ПарольАдминистратораКластера)

	Попытка		
		Лог.Отладка("Получаю список сеансов.");

		Кластеры = Агент.GetClusters();
		
		Лог.Отладка("ConnectionString: %1", Агент.ConnectionString);

		Если НЕ ЗначениеЗаполнено(ПортСервера) Тогда
			ПортСервера = 1541;
		КонецЕсли;

		Для Каждого Кластер из Кластеры Цикл
			
			//Лог.Отладка("Сравнение порта кластера и переданного порта сервера: %1, %2", Кластер.MainPort, ПортСервера);

			Если Кластер.MainPort <> Число(ПортСервера) Тогда
				Продолжить;
			КонецЕсли;
			
			Лог.Отладка("Определен кластер для порта: %1", ПортСервера);

			Если ЗначениеЗаполнено(ИмяАдминистратораКластера) И ЗначениеЗаполнено(ПарольАдминистратораКластера) Тогда
				Агент.Authenticate(Кластер, ИмяАдминистратораКластера, ИмяАдминистратораКластера);
			ИначеЕсли ЗначениеЗаполнено(ИмяАдминистратораКластера) Тогда
				Агент.Authenticate(Кластер, ИмяАдминистратораКластера, "");
			Иначе 
				Агент.Authenticate(Кластер, "", "");
			КонецЕсли;

			Лог.Отладка("Пройдена аутентификация.");

			Базы = Агент.GetInfoBases(Кластер);

			Лог.Отладка("Поиск базы: %1", ИмяБазы);
			Для Каждого База из Базы Цикл
				Если ВРег(База.Name) = ВРег(ИмяБазы) Тогда
					ИнформационнаяБаза = База;
					Прервать;
				КонецЕсли;
			КонецЦикла;				
				
			Если ИнформационнаяБаза = "" Тогда
				Лог.Откладка("База не найдена.");
				Возврат Неопределено;
			КонецЕсли;

			Лог.Отладка("	База найдена.");
				
			Сеансы = Агент.GetInfoBaseSessions(Кластер, ИнформационнаяБаза);

			Если Сеансы.Количество() = 1 И Сеансы[0].AppID = "comconsole" Тогда
				Лог.Откладка("Это текущее соединение.");
				Возврат Неопределено;
			КонецЕсли;

			//Для Каждого Сеанс из Сеансы Цикл
					////Если нРег(Сеанс.AppID) = "backgroundjob" ИЛИ нРег(Сеанс.AppID) = "comconsole" ИЛИ нРег(Сеанс.AppID) = "designer" Тогда
					//// если это сеансы конфигуратора или фонового задания, то не отключаем
					
				//Если нРег(Сеанс.AppID) = "comconsole" Тогда					
					//Продолжить;
				//КонецЕсли;
					
					////Если Сеанс.UserName = ИмяПользователя() Тогда
						//// это текущий пользователь
						////Продолжить;
					////КонецЕсли;
					
			//КонецЦикла;

			ТекущиеСеансы = Новый Структура;
			ТекущиеСеансы.Вставить("Кластер", Кластер);
			ТекущиеСеансы.Вставить("Сеансы", Сеансы);

			Возврат ТекущиеСеансы;

		КонецЦикла;	

	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;

КонецФункции

Функция СтрокаКоннекта(Знач СтрокаПодключения)
	Результат = "";
	Если Врег(Лев(СтрокаПодключения, 2)) = "/F" Тогда
		//Connect=File="/home/evgensosna/projects/land/build/ib";
		//Кавычки убираем два раза, вдруг кавычки в кавычках. 
		СтрокаПредварительно = ОбщиеМетоды.УбратьКавычкиВокругПути(Сред(СтрокаПодключения,3, СтрДлина(СтрокаПодключения)-2));
		СтрокаПредварительно = СтрЗаменить(СтрокаПредварительно, "/", ПолучитьРазделительПути());
		СтрокаПредварительно = СтрЗаменить(СтрокаПредварительно, "\", ПолучитьРазделительПути());
		СтрокаПредварительно = Новый Файл(СтрокаПредварительно).ПолноеИмя;
		Результат = "File=""" + СтрокаПредварительно + """";
	ИначеЕсли Врег(Лев(СтрокаПодключения, 2)) = "/S" Тогда
		//Connect=Srvr="serverssl.service.th.consul";Ref="ssl";
		РезультатПромежуточный = ОбщиеМетоды.УбратьКавычкиВокругПути(
				ОбщиеМетоды.УбратьКавычкиВокругПути(Сред(СтрокаПодключения,3))
				);
		Разделитель = ?(Найти(Результат, "/")>0, "/", "\");
		МассивПодключения = 
			СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(РезультатПромежуточный, Разделитель);
		Если МассивПодключения.Количество() = 2 Тогда 
			Результат = СтрШаблон("Srvr=""%1"";Ref=""%2"";", МассивПодключения[0], МассивПодключения[1]);
		КонецЕсли;
	ИначеЕсли Врег(Лев(СтрокаПодключения, 7)) = "Connect" Тогда
		Результат = СтрокаПодключения;
	КонецЕсли;
	Возврат Результат;
КонецФункции // СтрокаКоннекта(Знач СтрокаПодключения)

Процедура УстановитьСтатусБлокировкиСеансов(Знач ЗначенияПараметров)

	ИмяАдминистратораИБ				= ЗначенияПараметров["--db-user"];
	ПарольАдминистратораИБ 			= ЗначенияПараметров["--db-pwd"];	

	ВремяСтартаБлокировки			= ЗначенияПараметров["--lockstart"];
	ВремяОкончанияБлокировки		= ЗначенияПараметров["--lockstop"];
	КлючРазрешенияЗапуска			= ЗначенияПараметров["--uccode"];
	СообщениеОблокировке			= ЗначенияПараметров["--lockmessage"];

	ПараметрыПодключения = ЗначенияПараметров["ДанныеПодключения"];
	ПутьБазы = ПараметрыПодключения["ПутьБазы"];

	СтрокаПодключения = СтрокаКоннекта(ПутьБазы);
	СтрокаПодключения = СтрокаПодключения + "Usr=""" + ИмяАдминистратораИБ + """;" + "Pwd=""" + ПарольАдминистратораИБ + """;";
	Если ЗначениеЗаполнено(КлючРазрешенияЗапуска) Тогда
		СтрокаПодключения = СтрокаПодключения + "UC=""" + КлючРазрешенияЗапуска + """;";
	КонецЕсли;

	Лог.Отладка("Строка подключения: %1", СтрокаПодключения);

	Попытка
		V8 						= Новый COMObject("V82.COMConnector");
		Соединение 				= V8.Connect(СтрокаПодключения);
		Блокировка 				= Соединение.NewObject("БлокировкаСеансов");

		Блокировка.Установлена	= Истина;

		Если ЗначениеЗаполнено(ВремяСтартаБлокировки) Тогда
			Блокировка.Начало 	= ВремяСтартаБлокировки;
		Иначе
			Блокировка.Начало 	= ТекущаяДата();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВремяОкончанияБлокировки) Тогда
			Блокировка.Конец 	= ВремяОкончанияБлокировки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КлючРазрешенияЗапуска) Тогда 
			Блокировка.КодРазрешения = КлючРазрешенияЗапуска;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СообщениеОблокировке) Тогда	
			Блокировка.Сообщение = СообщениеОблокировке;
		КонецЕсли;	

		Соединение.УстановитьБлокировкуСеансов(Блокировка);

		Лог.Информация("Блокировка сеансов установлена");
	Исключение
		Лог.Информация("При установке блокировки возникла ошибка: " + ОписаниеОшибки());
		ВызватьИсключение ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Соединение 	= Неопределено;
	V8			= Неопределено;

КонецПроцедуры

Процедура СнятьБлокировкуСеансов(Знач ЗначенияПараметров)

	ИмяАдминистратораИБ				= ЗначенияПараметров["--db-user"];
	ПарольАдминистратораИБ 			= ЗначенияПараметров["--db-pwd"];	

	ВремяСтартаБлокировки			= ЗначенияПараметров["--lockstart"];
	ВремяОкончанияБлокировки		= ЗначенияПараметров["--lockstop"];
	КлючРазрешенияЗапуска			= ЗначенияПараметров["--uccode"];
	СообщениеОблокировке			= ЗначенияПараметров["--lockmessage"];

	ПараметрыПодключения = ЗначенияПараметров["ДанныеПодключения"];
	ПутьБазы = ПараметрыПодключения["ПутьБазы"];

	СтрокаПодключения = СтрокаКоннекта(ПутьБазы);
	СтрокаПодключения = СтрокаПодключения + "Usr=""" + ИмяАдминистратораИБ + """;" + "Pwd=""" + ПарольАдминистратораИБ + """;"; 
	Если ЗначениеЗаполнено(КлючРазрешенияЗапуска) Тогда
		СтрокаПодключения = СтрокаПодключения + "UC=""" + КлючРазрешенияЗапуска + """;";
	КонецЕсли;

	Лог.Отладка("Строка подключения: %1", СтрокаПодключения);
	Попытка
		V8 						= Новый COMObject("V82.COMConnector");
		Соединение 				= V8.Connect(СтрокаПодключения);
		ТекущийРежим			= Соединение.ПолучитьБлокировкуСеансов();
		Если ТекущийРежим.Установлена Тогда
			НовыйРежим 				= Соединение.NewObject("БлокировкаСеансов");
			НовыйРежим.Установлена 	= Ложь;
			Соединение.УстановитьБлокировкуСеансов(НовыйРежим);
		КонецЕсли;
		Лог.Информация("Блокировка сеансов отключена");
	Исключение
		Лог.Информация("При снятии блокировки возникла ошибка: " + ОписаниеОшибки());
		ВызватьИсключение ИнформацияОбОшибке().Описание;
	КонецПопытки;	
		
	Соединение  = Неопределено;
	V8			= Неопределено;
	
КонецПроцедуры

Процедура ОтключитьСоединенияСРабочимиПроцессами(Агент, Кластер, ИмяБазы, ИмяАдминистратораКластера, ПарольАдминистратораКластера)

	Попытка		
		Лог.Отладка("Получаю список рабочих процессов.");

		Если ЗначениеЗаполнено(ИмяАдминистратораКластера) И ЗначениеЗаполнено(ПарольАдминистратораКластера) Тогда
			Агент.Authenticate(Кластер, ИмяАдминистратораКластера, ИмяАдминистратораКластера);
		ИначеЕсли ЗначениеЗаполнено(ИмяАдминистратораКластера) Тогда
			Агент.Authenticate(Кластер, ИмяАдминистратораКластера, "");
		Иначе 
			Агент.Authenticate(Кластер, "", "");
		КонецЕсли;

		Лог.Отладка("Пройдена аутентификация.");

		Процессы = Агент.GetWorkingProcesses(Кластер);

		Шаблон 	 		= Процессы.CreateInfoBaseInfo();
		Шаблон.Name 	= ИмяБазы;
		СоединенияБазы 	= Процессы.GetInfoBaseConnections(Шаблон); 

		Лог.Информация("Количество соединений: %1", СоединенияБазы.Количество());

		Для Каждого Соединение Из СоединенияБазы Цикл
			//Если нРег(Соединение.Application) = "backgroundjob" ИЛИ нРег(Соединение.Application) = "designer" Тогда
			// если это соединение конфигуратора или фонового задания, то не отключаем
			
			//Если нРег(Соединение.AppID) = "designer" Тогда 
			//	Продолжить;
			//КонецЕсли;

			//Если мСоединение.UserName = ИмяПользователя() Тогда
			//	// это текущий пользователь
			//	Продолжить;
			//КонецЕсли;
			Процессы.Disconnect(Соединение);
			Лог.Информация("Соединение %1 %2 отключено.", Соединение.UserName, Соединение.AppID);
		КонецЦикла;

	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтключитьСуществующиеСеансы(Агент, ПортСервера, ИмяБазы, ИмяАдминистратораИБ, ПарольАдминистратораИБ, ИмяАдминистратораКластера, ПарольАдминистратораКластера)

	Лог.Информация("Отключаю существующие сеансы.");
	
	ДанныеПоСеансам = ПолучитьСписокСеансов(Агент, ПортСервера, ИмяБазы, ИмяАдминистратораИБ, ПарольАдминистратораИБ, ИмяАдминистратораКластера, ПарольАдминистратораКластера);

	Если НЕ ЗначениеЗаполнено(ДанныеПоСеансам) Тогда
		Возврат;
	КонецЕсли;

	Кластер 	= ДанныеПоСеансам.Кластер;
	СеансыБазы 	= ДанныеПоСеансам.Сеансы;

	Лог.Информация("Количество сеансов: %1", СеансыБазы.Количество());

	Для Каждого Сеанс Из СеансыБазы Цикл
		Попытка
			Если нРег(Сеанс.AppID) = "comconsole" Тогда					
				Продолжить;
			КонецЕсли;
			ОтключитьСеанс(Агент, Кластер, Сеанс);
		Исключение
			Лог.Ошибка(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтключитьСеанс(Агент, Кластер, Знач Сеанс)

	Агент.TerminateSession(Кластер, Сеанс);
	Лог.Информация("Сеанс %1 %2 отключен.", Сеанс.UserName, Сеанс.AppID);

КонецПроцедуры

Процедура УдалитьВсеСеансыИСоединенияБазы(ЗначенияПараметров)

	УстановитьСтатусБлокировкиСеансов(ЗначенияПараметров);

	ПараметрыПодключенияCOM = ЗначенияПараметров["ДанныеПодключенияCOM"];

	Если ПараметрыПодключенияCOM = Неопределено ИЛИ ПараметрыПодключенияCOM.Количество() = 0 Тогда
		ВызватьИсключение "Ошибка получения параметров для COM соединения.";
	КонецЕсли;

	ПолноеИмяСервера				= ПараметрыПодключенияCOM["ПолноеИмяСервера"];
	ИмяСервера						= ПараметрыПодключенияCOM["ИмяСервера"];
	ПортСервера						= ПараметрыПодключенияCOM["ПортСервера"];
	ИмяБазы							= ПараметрыПодключенияCOM["ИмяБазы"];
	ИмяАдминистратораИБ				= ЗначенияПараметров["--db-user"];
	ПарольАдминистратораИБ 			= ЗначенияПараметров["--db-pwd"];	
	ИмяАдминистратораКластера 		= "";
	ПарольАдминистратораКластера	= "";
	ЧислоПопыток					= ЗначенияПараметров["--try"];

	Если ЧислоПопыток = Неопределено Тогда
		ЧислоПопыток = 1;
	КонецЕсли;

	Пауза_ПолСекунды = 500;
	Пауза_ДесятьСек = 10000;

	Попытка
		V8 		= Новый COMОбъект("v82.COMConnector");	
		Агент 	 = V8.ConnectAgent(ИмяСервера);
	Исключение
		Лог.Предупреждение("Попытка установки агента не удалось. Текст ошибки:
		|%1", ИнформацияОбОшибке().Описание);
	КонецПопытки;

	Для Сч = 1 По Число(ЧислоПопыток) Цикл
		
		Лог.Информация("Попытка: %1", Сч);

		Попытка
			
			ОтключитьСуществующиеСеансы(Агент, ПортСервера, ИмяБазы, ИмяАдминистратораИБ, ПарольАдминистратораИБ, ИмяАдминистратораКластера, ПарольАдминистратораКластера);
			Приостановить(Пауза_ПолСекунды);
			ДанныеПоСеансам = ПолучитьСписокСеансов(Агент, ПортСервера, ИмяБазы, ИмяАдминистратораИБ, ПарольАдминистратораИБ, ИмяАдминистратораКластера, ПарольАдминистратораКластера);

			Если НЕ ЗначениеЗаполнено(ДанныеПоСеансам) Тогда
				Продолжить;
			КонецЕсли;
			
			Кластер = ДанныеПоСеансам.Кластер;
			Сеансы 	= ДанныеПоСеансам.Сеансы;

			Лог.Информация("Количество сеансов: %1", Сеансы.Количество());
			
			Если Сеансы.Количество() Тогда
				Лог.Информация("Пауза перед отключением соединений");
				Приостановить(Пауза_ДесятьСек);
				ОтключитьСоединенияСРабочимиПроцессами(Агент, Кластер, ИмяБазы, ИмяАдминистратораКластера, ПарольАдминистратораКластера);
			КонецЕсли;
			
			Прервать;

		Исключение
			Лог.Предупреждение("Попытка удаления сеансов не удалась. Текст ошибки:
			|%1", ИнформацияОбОшибке().Описание);
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Функция ОпределитьКомандуВыполнения()

	ПараметрыЗапуска = РазобратьАргументыКоманднойСтроки();
	
	Если ПараметрыЗапуска = Неопределено ИЛИ ПараметрыЗапуска.Количество() = 0 Тогда
		
		Лог.Ошибка("Некорректные аргументы командной строки.");
		Возврат РезультатыКоманд().ОшибкаВремениВыполнения;

	КонецЕсли;

	Команда = "";
	ЗначенияПараметров = Неопределено;

	Если ТипЗнч(ПараметрыЗапуска) = Тип("Структура") Тогда
		
		// это команда
		Команда				= ПараметрыЗапуска.Команда;
		ЗначенияПараметров	= ПараметрыЗапуска.ЗначенияПараметров;

		ДополнитьЗначенияПараметров(Команда, ЗначенияПараметров);

		Если Команда = "kick" Тогда
			Лог.Отладка("Выполняю команду %1", Команда);
			УдалитьВсеСеансыИСоединенияБазы(ЗначенияПараметров);
		ИначеЕсли
			Команда = "lock" Тогда
			Лог.Отладка("Выполняю команду %1", Команда);
			УстановитьСтатусБлокировкиСеансов(ЗначенияПараметров);
		ИначеЕсли
			Команда = "unlock" Тогда
			Лог.Отладка("Выполняю команду %1", Команда);
			СнятьБлокировкуСеансов(ЗначенияПараметров);
		КонецЕсли;

	Иначе
		
		ВызватьИсключение "Некорректные аргументы командной строки.";
		
	КонецЕсли;

	ЗавершитьРаботу(РезультатыКоманд().Успех);

КонецФункции

Инициализация();

Попытка
		
	КодВозврата = ОпределитьКомандуВыполнения();
	ЗавершитьРаботу(КодВозврата);
		
Исключение

	Лог.КритичнаяОшибка(ОписаниеОшибки());
	ЗавершитьРаботу(РезультатыКоманд().ОшибкаВремениВыполнения);
		
КонецПопытки;