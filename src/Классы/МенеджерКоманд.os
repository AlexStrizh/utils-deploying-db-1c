#Использовать configor

Перем Лог; // Объект, для логирования

// Перем УдалятьВременныеФайлы; // Булево, признак удаления временных файлов

Перем АвторизацияНаКластереСерверов; // Структура ключи <АдминистраторКластера>, <ПарольАдминистратораКластера>

// ///////////////////////////////////////////////////////////////////////////////////////////////
// // ПРОГРАММНЫЙ ИНТЕРФЕЙС

Перем ТекущаяВерсияПлатформы Экспорт; // Строка, используемая версия 1С.Предприятие

Перем СтрокаПодключенияКБазе;
Перем КоличествоПопытокОтключения;
Перем БлокироватьСеансы;
Перем КодРазрешенияЗапуска;
Перем СообщениеБлокировки;
Перем ВремяСтартаБлокировки;
Перем ВремяОкончанияБлокировки;
Перем ФильтрСеансов;

Перем ПутьКФайлуНастроек;

Перем Параметры;

#Область Публичное_API
// Устанавливает параметры авторизации на кластере серверов 1С
//
// Параметры:
//   Пользователь - Строка - пользователь кластера серверов 1С
//   Пароль - Строка - пароль пользователя кластера серверов 1С
//
// Возвращаемое значение:
//   Объект.МенеджерКоманд - ссылка на текущий объект класса <МенеджерКоманд>
//
Функция АвторизацияНаКластереСерверов(Знач Пользователь, Знач Пароль) Экспорт

	Лог.Отладка("Установлена авторизация на кластере серверов 1С: пользователь <%1>, пароль <%2>", Пользователь, Пароль);
	АвторизацияНаКластереСерверов.Вставить("АдминистраторКластера" , Пользователь);
	АвторизацияНаКластереСерверов.Вставить("ПарольАдминистратораКластера", Пароль);

	Возврат ЭтотОбъект;

КонецФункции

// Возвращает значение параметра со значением администратора кластера
//
// Возвращаемое значение:
//   Строка - значение параметра <АвторизацияНаКластереСерверов.АдминистратораКластера>
//
Функция ПолучитьАдминистратораКластера() Экспорт
	Возврат АвторизацияНаКластереСерверов.АдминистраторКластера;
КонецФункции

// Возвращает значение параметра со значением пароля администратора кластера
//
// Возвращаемое значение:
//   Строка - значение параметра <АвторизацияНаКластереСерверов.ПарольАдминистратораКластера>
//
Функция ПолучитьПарольАдминистратораКластера() Экспорт
	Возврат АвторизацияНаКластереСерверов.ПарольАдминистратораКластера;
КонецФункции

// Устанавливает уровень вывода логов
//
// Параметры:
//   НовыйУровеньЛога - Строка - уровень вывода лога
//
// Возвращаемое значение:
//   Объект.МенеджерКоманд - ссылка на текущий объект класса <МенеджерКоманд>
//
Функция УровеньЛога(Знач НовыйУровеньЛога) Экспорт

	Лог.УстановитьУровень(НовыйУровеньЛога);
	Возврат ЭтотОбъект;

КонецФункции

// Устанавливает версию платформы 1С
//
// Параметры:
//   НоваяВерсияПлатформы - Строка - версия платформы 1С используемой для работы
//
// Возвращаемое значение:
//   Объект.МенеджерКоманд - ссылка на текущий объект класса <МенеджерКоманд>
//
Функция ВерсияПлатформы(Знач НоваяВерсияПлатформы) Экспорт

	ТекущаяВерсияПлатформы = НоваяВерсияПлатформы;
	Возврат ЭтотОбъект;

КонецФункции

// Устанавливает путь к файлу настроек
//
// Параметры:
//   НовыйПутьКФайлуНастроек - Строка - путь к файлу настроек
//
// Возвращаемое значение:
//   Объект.МенеджерКоманд - ссылка на текущий объект класса <МенеджерКоманд>
//
Функция УстановитьНастройки(НовыйПутьКФайлуНастроек) Экспорт
	ПутьКФайлуНастроек = НовыйПутьКФайлуНастроек;
	Возврат ЭтотОбъект;
КонецФункции

// Устанавливает количество попыток отключения пользователей
//
// Параметры:
//   КоличествоПопыток - Число - количество попыток отключения пользователей
//
// Возвращаемое значение:
//   Объект.МенеджерКоманд - ссылка на текущий объект класса <МенеджерКоманд>
//
Функция КоличествоПопытокОтключения(Знач КоличествоПопыток) Экспорт
	КоличествоПопытокОтключения = КоличествоПопыток;
	Возврат ЭтотОбъект;
КонецФункции

// Устанавливает строку подключения к информационной базе
//
// Параметры:
//   СтрокаПодключения - Строка - строка подлючения
//
// Возвращаемое значение:
//   Объект.МенеджерКоманд - ссылка на текущий объект класса <МенеджерКоманд>
//
Функция СтрокаПодключения(Знач СтрокаПодключения) Экспорт
	СтрокаПодключенияКБазе = СтрокаПодключения;
	Возврат ЭтотОбъект;
КонецФункции

// Возвращает значение параметра со значением строки подключения к информационной базе
//
// Возвращаемое значение:
//   Строка - значение параметра <СтрокаПодключенияКБазе>
//
Функция ПолучитьСтрокуПодключенияКБазе() Экспорт
	Возврат СтрокаПодключенияКБазе;
КонецФункции

// Устанавливает блокировку сеансов к информационной базе
//
// Параметры:
//   Блокировать - Булево - блокировать/не блокировать (Истина/Ложь)
//
// Возвращаемое значение:
//   Объект.МенеджерКоманд - ссылка на текущий объект класса <МенеджерКоманд>
//
Функция БлокироватьСеансы(Знач Блокировать) Экспорт
	БлокироватьСеансы = Блокировать;
	Возврат ЭтотОбъект;
КонецФункции

// Возвращает значение параметра блокировки информационной базы
//
// Возвращаемое значение:
//   Булево - значение параметра <БлокироватьСеансы>
//
Функция ПолучитьИнформациюОБлокировкеСеансов() Экспорт
	Возврат БлокироватьСеансы;
КонецФункции

// Устанавливает код разрешения подключения к информационной базе
//
// Параметры:
//   КодРазрешения - Строка - код разрешения подключения к информационной базе
//
// Возвращаемое значение:
//   Объект.МенеджерКоманд - ссылка на текущий объект класса <МенеджерКоманд>
//
Функция УстановитьКодРазрешенияЗапуска(Знач КодРазрешения) Экспорт
	КодРазрешенияЗапуска = КодРазрешения;
	Возврат ЭтотОбъект;
КонецФункции

// Возвращает значение кода разрешения подключения к информационной базе
//
// Возвращаемое значение:
//   Строка - значение параметра <КодРазрешенияЗапуска>
//
Функция ПолучитьКодРазрешенияЗапуска() Экспорт
	Возврат КодРазрешенияЗапуска;
КонецФункции

// Устанавливает сообщение блокировки подключения к информационной базе
//
// Параметры:
//   Сообщение - Строка - код разрешения подключения к информационной базе
//
// Возвращаемое значение:
//   Объект.МенеджерКоманд - ссылка на текущий объект класса <МенеджерКоманд>
//
Функция УстановитьСообщениеБлокировки(Знач Сообщение) Экспорт
	СообщениеБлокировки = Сообщение;
	Возврат ЭтотОбъект;
КонецФункции

// Возвращает значение сообщения блокировки информационной базы
//
// Возвращаемое значение:
//   Строка - значение параметра <СообщениеБлокировки>
//
Функция ПолучитьСообщениеБлокировки() Экспорт
	Возврат СообщениеБлокировки;
КонецФункции

// Устанавливает время блокировки подключения к информационной базе
//
// Параметры:
//   ВремяСтарта - Строка - время старта блокировки подключения информационной базы,
//							формат '2040-12-31T23:59:59'
//
// Возвращаемое значение:
//   Объект.МенеджерКоманд - ссылка на текущий объект класса <МенеджерКоманд>
//
Функция УстановитьВремяСтартаБлокировки(Знач ВремяСтарта) Экспорт
	ВремяСтартаБлокировки = ВремяСтарта;
	Возврат ЭтотОбъект;
КонецФункции

// Возвращает значение времени начала блокировки информационной базы
//
// Возвращаемое значение:
//   Строка - значение параметра <ВремяСтартаБлокировки>
//
Функция ПолучитьВремяСтартаБлокировки() Экспорт
	Возврат ВремяСтартаБлокировки;
КонецФункции

// Устанавливает время окончания блокировки подключения к информационной базе
//
// Параметры:
//   ВремяОкончания - Строка - время окончания блокировки подключения информационной базы,
//							формат '2040-12-31T23:59:59'
//
// Возвращаемое значение:
//   Объект.МенеджерКоманд - ссылка на текущий объект класса <МенеджерКоманд>
//
Функция УстановитьВремяОкончанияБлокировки(Знач ВремяОкончания) Экспорт
	ВремяОкончанияБлокировки = ВремяОкончания;
	Возврат ЭтотОбъект;
КонецФункции

// Возвращает значение времени окончания блокировки информационной базы
//
// Возвращаемое значение:
//   Строка - значение параметра <ВремяСтартаБлокировки>
//
Функция ПолучитьВремяОкончанияБлокировки() Экспорт
	Возврат ВремяОкончанияБлокировки;
КонецФункции

// Устанавливает фильтр поиска сеансов подключений к информационной базе
//
// Параметры:
//   Сообщение - Строка - фильтр поиска сеансов
//
// Возвращаемое значение:
//   Объект.МенеджерКоманд - ссылка на текущий объект класса <МенеджерКоманд>
//
Функция УстановитьФильтрСеансов(Знач Фильтр) Экспорт
	ФильтрСеансов = Фильтр;
	Возврат ЭтотОбъект;
КонецФункции

// Возвращает значение фильтра поиска сеансов подключений информационной базы
//
// Возвращаемое значение:
//   Строка - значение параметра <ФильтрСеансов>
//
Функция ПолучитьФильтрСеансов() Экспорт
	Возврат ФильтрСеансов;
КонецФункции

Функция УстановитьАдаптерПараметров83()

	МассивПараметров = Новый Массив;

	МассивПараметров.Добавить("session");
	МассивПараметров.Добавить("kill");
	МассивПараметров.Добавить("--v8version");
	МассивПараметров.Добавить(ТекущаяВерсияПлатформы);

	Если НЕ ПустаяСтрока(ПутьКФайлуНастроек) Тогда
		МассивПараметров.Добавить("--settings");
		МассивПараметров.Добавить(ПутьКФайлуНастроек);
	КонецЕсли;

	ПараметрыПодключения = РазложитьСтрокуПодлючения(СтрокаПодключенияКБазе);

	МассивПараметров.Добавить("--ras");
	МассивПараметров.Добавить(ПараметрыПодключения.ПолноеИмяСервера);

	МассивПараметров.Добавить("--db");
	МассивПараметров.Добавить(ПараметрыПодключения.ИмяБазы);

	МассивПараметров.Добавить("--try");
	МассивПараметров.Добавить(КоличествоПопытокОтключения);

	Если НЕ ЗначениеЗаполнено(БлокироватьСеансы) ИЛИ НЕ БлокироватьСеансы Тогда
		МассивПараметров.Добавить("--with-nolock");
	Иначе
		Если ЗначениеЗаполнено(КодРазрешенияЗапуска) Тогда
			МассивПараметров.Добавить("--uccode");
			МассивПараметров.Добавить(КодРазрешенияЗапуска);

			Если ЗначениеЗаполнено(СообщениеБлокировки) Тогда
				МассивПараметров.Добавить("--lockmessage");
				МассивПараметров.Добавить(СообщениеБлокировки);
			КонецЕсли;

			Если ЗначениеЗаполнено(ВремяСтартаБлокировки) Тогда
				МассивПараметров.Добавить("--lockstart");
				МассивПараметров.Добавить(ВремяСтартаБлокировки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(ФильтрСеансов) Тогда
		МассивПараметров.Добавить("--filter");
		МассивПараметров.Добавить(ФильтрСеансов);
	КонецЕсли;

	ПараметрыЗапуска = Новый Структура;
	ПараметрыЗапуска.Вставить("АргументыКоманднойСтроки", МассивПараметров);

	Возврат ПараметрыЗапуска;

КонецФункции

Функция УстановитьАдаптерПараметров82()

	СтруктураПараметров = Новый Структура;

	СтруктураПараметров.Вставить("СтрокаПодключенияКБазе", СтрокаПодключенияКБазе);
	СтруктураПараметров.Вставить("АдминистраторИБ", АвторизацияНаКластереСерверов.АдминистраторКластера);
	СтруктураПараметров.Вставить("ПарольАдминистратораИБ", АвторизацияНаКластереСерверов.ПарольАдминистратораКластера);

	ПараметрыПодключения = РазложитьСтрокуПодлючения(СтрокаПодключенияКБазе);

	СтруктураПараметров.Вставить("ПолноеИмяСервера", ПараметрыПодключения.ПолноеИмяСервера);
	СтруктураПараметров.Вставить("ИмяСервера", ПараметрыПодключения.ИмяСервера);
	СтруктураПараметров.Вставить("ПортСервера", ПараметрыПодключения.ПортСервера);
	СтруктураПараметров.Вставить("ИмяБазы", ПараметрыПодключения.ИмяБазы);

	Если НЕ ЗначениеЗаполнено(БлокироватьСеансы) ИЛИ БлокироватьСеансы Тогда
		СтруктураПараметров.Вставить("БлокироватьСеансы", Истина);
		СтруктураПараметров.Вставить("КодРазрешенияЗапуска", КодРазрешенияЗапуска);
		СтруктураПараметров.Вставить("СообщениеБлокировки", СообщениеБлокировки);
		СтруктураПараметров.Вставить("ВремяСтартаБлокировки", ВремяСтартаБлокировки);
		СтруктураПараметров.Вставить("ВремяОкончанияБлокировки", ВремяОкончанияБлокировки);
	Иначе
		СтруктураПараметров.Вставить("БлокироватьСеансы", Ложь);
	КонецЕсли;

	СтруктураПараметров.Вставить("КоличествоПопытокОтключения", КоличествоПопытокОтключения);

	Возврат СтруктураПараметров;

КонецФункции

Процедура ВыполнитьОтключениеПользователей() Экспорт

	Если ПолучитьВариантЗапускаОтключения() = "8.3" Тогда

		Попытка
			ПараметрыОкружения = УстановитьАдаптерПараметров83();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение "Ошибка при попытке получения параметров окружения. " + ИнформацияОбОшибке.Описание;
		КонецПопытки;

		Попытка
			vrunner = ЗагрузитьСценарий(ПолучитьПутьКVrunner(), ПараметрыОкружения);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение "Ошибка при загрузке сценария vrunner. " + ИнформацияОбОшибке.Описание;
		КонецПопытки;
		
	Иначе
		Попытка
			ПараметрыОкружения = УстановитьАдаптерПараметров82();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение "Ошибка при попытке получения параметров окружения. " + ИнформацияОбОшибке.Описание;
		КонецПопытки;

		Попытка
			УдалитьВсеСеансыИСоединенияБазы(ПараметрыОкружения);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение "Ошибка при отключении пользователей для версии 8.2. " + ИнформацияОбОшибке.Описание;
		КонецПопытки;

	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьБлокировкуПользователей() Экспорт

	Если ПолучитьВариантЗапускаОтключения() = "8.3" Тогда

		Попытка
			ПараметрыОкружения = УстановитьАдаптерПараметров83();
			ПараметрыОкружения.АргументыКоманднойСтроки[1] = "lock";
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение "Ошибка при попытке получения параметров окружения. " + ИнформацияОбОшибке.Описание;
		КонецПопытки;

		Попытка
			vrunner = ЗагрузитьСценарий(ПолучитьПутьКVrunner(), ПараметрыОкружения);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение "Ошибка при загрузке сценария vrunner. " + ИнформацияОбОшибке.Описание;
		КонецПопытки;
		
	Иначе
		Попытка
			ПараметрыОкружения = УстановитьАдаптерПараметров82();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение "Ошибка при попытке получения параметров окружения. " + ИнформацияОбОшибке.Описание;
		КонецПопытки;

		Попытка
			УстановитьСтатусБлокировкиСеансов(ПараметрыОкружения);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение "Ошибка при отключении пользователей для версии 8.2. " + ИнформацияОбОшибке.Описание;
		КонецПопытки;

	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьРазблокировкуПользователей() Экспорт

	Если ПолучитьВариантЗапускаОтключения() = "8.3" Тогда

		Попытка
			ПараметрыОкружения = УстановитьАдаптерПараметров83();
			ПараметрыОкружения.АргументыКоманднойСтроки[1] = "unlock";
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение "Ошибка при попытке получения параметров окружения. " + ИнформацияОбОшибке.Описание;
		КонецПопытки;

		Попытка
			vrunner = ЗагрузитьСценарий(ПолучитьПутьКVrunner(), ПараметрыОкружения);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение "Ошибка при загрузке сценария vrunner. " + ИнформацияОбОшибке.Описание;
		КонецПопытки;
		
	Иначе
		Попытка
			ПараметрыОкружения = УстановитьАдаптерПараметров82();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение "Ошибка при попытке получения параметров окружения. " + ИнформацияОбОшибке.Описание;
		КонецПопытки;

		Попытка
			СнятьБлокировкуСеансов(ПараметрыОкружения);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ВызватьИсключение "Ошибка при отключении пользователей для версии 8.2. " + ИнформацияОбОшибке.Описание;
		КонецПопытки;

	КонецЕсли;

КонецПроцедуры

Процедура УстановитьСтатусБлокировкиСеансов(Знач ЗначенияПараметров)

	ИмяАдминистратораИБ				= ЗначенияПараметров["АдминистраторИБ"];
	ПарольАдминистратораИБ 			= ЗначенияПараметров["ПарольАдминистратораИБ"];	

	ВремяСтартаБлокировки			= ЗначенияПараметров["ВремяСтартаБлокировки"];
	ВремяОкончанияБлокировки		= ЗначенияПараметров["ВремяОкончанияБлокировки"];
	КодРазрешенияЗапуска			= ЗначенияПараметров["КодРазрешенияЗапуска"];
	СообщениеОблокировке			= ЗначенияПараметров["СообщениеБлокировки"];

	ПутьБазы = ЗначенияПараметров["СтрокаПодключенияКБазе"];

	СтрокаПодключения = СтрокаКоннекта(ПутьБазы);
	СтрокаПодключения = СтрокаПодключения + "Usr=""" + ИмяАдминистратораИБ + """;" + "Pwd=""" + ПарольАдминистратораИБ + """;";
	Если ЗначениеЗаполнено(КодРазрешенияЗапуска) Тогда
		СтрокаПодключения = СтрокаПодключения + "UC=""" + КодРазрешенияЗапуска + """;";
	КонецЕсли;

	Лог.Отладка("Строка подключения: %1", СтрокаПодключения);

	Попытка
		V8 						= Новый COMObject("V82.COMConnector");
		Соединение 				= V8.Connect(СтрокаПодключения);
		Блокировка 				= Соединение.NewObject("БлокировкаСеансов");

		Блокировка.Установлена	= Истина;

		Если ЗначениеЗаполнено(ВремяСтартаБлокировки) Тогда
			Блокировка.Начало 	= ВремяСтартаБлокировки;
		Иначе
			Блокировка.Начало 	= ТекущаяДата();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВремяОкончанияБлокировки) Тогда
			Блокировка.Конец 	= ВремяОкончанияБлокировки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КодРазрешенияЗапуска) Тогда 
			Блокировка.КодРазрешения = КодРазрешенияЗапуска;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СообщениеОблокировке) Тогда	
			Блокировка.Сообщение = СообщениеОблокировке;
		КонецЕсли;	

		Соединение.УстановитьБлокировкуСеансов(Блокировка);

		Лог.Информация("Блокировка сеансов установлена");
	Исключение
		ВызватьИсключение "При установке блокировки возникла ошибка. " + ИнформацияОбОшибке().Описание;
	КонецПопытки;
	
	Соединение 	= Неопределено;
	V8			= Неопределено;

КонецПроцедуры

Процедура СнятьБлокировкуСеансов(Знач ЗначенияПараметров)

	ИмяАдминистратораИБ				= ЗначенияПараметров["АдминистраторИБ"];
	ПарольАдминистратораИБ 			= ЗначенияПараметров["ПарольАдминистратораИБ"];	

	ВремяСтартаБлокировки			= ЗначенияПараметров["ВремяСтартаБлокировки"];
	ВремяОкончанияБлокировки		= ЗначенияПараметров["ВремяОкончанияБлокировки"];
	КодРазрешенияЗапуска			= ЗначенияПараметров["КодРазрешенияЗапуска"];
	СообщениеОблокировке			= ЗначенияПараметров["СообщениеБлокировки"];

	ПутьБазы = ЗначенияПараметров["СтрокаПодключенияКБазе"];

	СтрокаПодключения = СтрокаКоннекта(ПутьБазы);
	СтрокаПодключения = СтрокаПодключения + "Usr=""" + ИмяАдминистратораИБ + """;" + "Pwd=""" + ПарольАдминистратораИБ + """;"; 
	Если ЗначениеЗаполнено(КодРазрешенияЗапуска) Тогда
		СтрокаПодключения = СтрокаПодключения + "UC=""" + КодРазрешенияЗапуска + """;";
	КонецЕсли;

	Лог.Отладка("Строка подключения: %1", СтрокаПодключения);
	Попытка
		V8 						= Новый COMObject("V82.COMConnector");
		Соединение 				= V8.Connect(СтрокаПодключения);
		ТекущийРежим			= Соединение.ПолучитьБлокировкуСеансов();
		Если ТекущийРежим.Установлена Тогда
			НовыйРежим 				= Соединение.NewObject("БлокировкаСеансов");
			НовыйРежим.Установлена 	= Ложь;
			Соединение.УстановитьБлокировкуСеансов(НовыйРежим);
		КонецЕсли;
		Лог.Информация("Блокировка сеансов отключена");
	Исключение
		ВызватьИсключение "При установке блокировки возникла ошибка. " + ИнформацияОбОшибке().Описание;
	КонецПопытки;	
		
	Соединение  = Неопределено;
	V8			= Неопределено;
	
КонецПроцедуры

Процедура УдалитьВсеСеансыИСоединенияБазы(ЗначенияПараметров)

	ПолноеИмяСервера				= ЗначенияПараметров["ПолноеИмяСервера"];
	ИмяСервера						= ЗначенияПараметров["ИмяСервера"];
	ПортСервера						= ЗначенияПараметров["ПортСервера"];
	ИмяБазы							= ЗначенияПараметров["ИмяБазы"];

	ИмяАдминистратораИБ				= ЗначенияПараметров["АдминистраторИБ"];
	ПарольАдминистратораИБ 			= ЗначенияПараметров["ПарольАдминистратораИБ"];	
	ИмяАдминистратораКластера 		= "";
	ПарольАдминистратораКластера	= "";
	ЧислоПопыток					= ЗначенияПараметров["КоличествоПопытокОтключения"];

	БлокироватьСеансы				= ЗначенияПараметров["БлокироватьСеансы"];

	Если БлокироватьСеансы Тогда
		ВремяСтартаБлокировки			= ЗначенияПараметров["ВремяСтартаБлокировки"];
		ВремяОкончанияБлокировки		= ЗначенияПараметров["ВремяОкончанияБлокировки"];
		КодРазрешенияЗапуска			= ЗначенияПараметров["КодРазрешенияЗапуска"];
		СообщениеОблокировке			= ЗначенияПараметров["СообщениеБлокировки"];

		УстановитьСтатусБлокировкиСеансов(ЗначенияПараметров);
	КонецЕсли;

	Пауза_ПолСекунды = 500;
	Пауза_ДесятьСек = 10000;

	Попытка
		V8 		= Новый COMОбъект("v82.COMConnector");	
		Агент 	 = V8.ConnectAgent(ИмяСервера);
	Исключение
		ВызватьИсключение "Ошибка сетевого доступа к серверу. " + ИнформацияОбОшибке().Описание;
	КонецПопытки;

	Для Сч = 1 По Число(ЧислоПопыток) Цикл
		
		Лог.Информация("Попытка: %1", Сч);

		Попытка
			
			ОтключитьСуществующиеСеансы(Агент, ПортСервера, ИмяБазы, ИмяАдминистратораИБ, ПарольАдминистратораИБ, ИмяАдминистратораКластера, ПарольАдминистратораКластера);
			Приостановить(Пауза_ПолСекунды);
			ДанныеПоСеансам = ПолучитьСписокСеансов(Агент, ПортСервера, ИмяБазы, ИмяАдминистратораИБ, ПарольАдминистратораИБ, ИмяАдминистратораКластера, ПарольАдминистратораКластера);

			Если НЕ ЗначениеЗаполнено(ДанныеПоСеансам) Тогда
				Продолжить;
			КонецЕсли;
			
			Кластер = ДанныеПоСеансам.Кластер;
			Сеансы 	= ДанныеПоСеансам.Сеансы;

			Лог.Информация("Количество сеансов: %1", Сеансы.Количество());
			
			Если Сеансы.Количество() Тогда
				Лог.Информация("Пауза перед отключением соединений");
				Приостановить(Пауза_ДесятьСек);
				ОтключитьСоединенияСРабочимиПроцессами(Агент, Кластер, ИмяБазы, ИмяАдминистратораКластера, ПарольАдминистратораКластера);
			КонецЕсли;
			
			Прервать;

		Исключение
			ВызватьИсключение "Попытка удаления сеансов не удалась. " + ИнформацияОбОшибке().Описание;
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСписокСеансов(Агент, ПортСервера, ИмяБазы, ИмяАдминистратораИБ, ПарольАдминистратораИБ, ИмяАдминистратораКластера, ПарольАдминистратораКластера)

	Попытка		
		Лог.Отладка("Получаю список сеансов.");

		Кластеры = Агент.GetClusters();
		
		Лог.Отладка("ConnectionString: %1", Агент.ConnectionString);

		Если НЕ ЗначениеЗаполнено(ПортСервера) Тогда
			ПортСервера = 1541;
		КонецЕсли;

		Для Каждого Кластер из Кластеры Цикл
			
			//Лог.Отладка("Сравнение порта кластера и переданного порта сервера: %1, %2", Кластер.MainPort, ПортСервера);

			Если Кластер.MainPort <> Число(ПортСервера) Тогда
				Продолжить;
			КонецЕсли;
			
			Лог.Отладка("Определен кластер для порта: %1", ПортСервера);

			Если ЗначениеЗаполнено(ИмяАдминистратораКластера) И ЗначениеЗаполнено(ПарольАдминистратораКластера) Тогда
				Агент.Authenticate(Кластер, ИмяАдминистратораКластера, ИмяАдминистратораКластера);
			ИначеЕсли ЗначениеЗаполнено(ИмяАдминистратораКластера) Тогда
				Агент.Authenticate(Кластер, ИмяАдминистратораКластера, "");
			Иначе 
				Агент.Authenticate(Кластер, "", "");
			КонецЕсли;

			Лог.Отладка("Пройдена аутентификация.");

			Базы = Агент.GetInfoBases(Кластер);

			Лог.Отладка("Поиск базы: %1", ИмяБазы);
			Для Каждого База из Базы Цикл
				Если ВРег(База.Name) = ВРег(ИмяБазы) Тогда
					ИнформационнаяБаза = База;
					Прервать;
				КонецЕсли;
			КонецЦикла;				
				
			Если ИнформационнаяБаза = "" Тогда
				Лог.Откладка("База не найдена.");
				Возврат Неопределено;
			КонецЕсли;

			Лог.Отладка("	База найдена.");
				
			Сеансы = Агент.GetInfoBaseSessions(Кластер, ИнформационнаяБаза);

			Если Сеансы.Количество() = 1 И Сеансы[0].AppID = "comconsole" Тогда
				Лог.Откладка("Это текущее соединение.");
				Возврат Неопределено;
			КонецЕсли;

			//Для Каждого Сеанс из Сеансы Цикл
					////Если нРег(Сеанс.AppID) = "backgroundjob" ИЛИ нРег(Сеанс.AppID) = "comconsole" ИЛИ нРег(Сеанс.AppID) = "designer" Тогда
					//// если это сеансы конфигуратора или фонового задания, то не отключаем
					
				//Если нРег(Сеанс.AppID) = "comconsole" Тогда					
					//Продолжить;
				//КонецЕсли;
					
					////Если Сеанс.UserName = ИмяПользователя() Тогда
						//// это текущий пользователь
						////Продолжить;
					////КонецЕсли;
					
			//КонецЦикла;

			ТекущиеСеансы = Новый Структура;
			ТекущиеСеансы.Вставить("Кластер", Кластер);
			ТекущиеСеансы.Вставить("Сеансы", Сеансы);

			Возврат ТекущиеСеансы;

		КонецЦикла;	

	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;

КонецФункции

Процедура ОтключитьСуществующиеСеансы(Агент, ПортСервера, ИмяБазы, ИмяАдминистратораИБ, ПарольАдминистратораИБ, ИмяАдминистратораКластера, ПарольАдминистратораКластера)

	Лог.Информация("Отключаю существующие сеансы.");
	
	ДанныеПоСеансам = ПолучитьСписокСеансов(Агент, ПортСервера, ИмяБазы, ИмяАдминистратораИБ, ПарольАдминистратораИБ, ИмяАдминистратораКластера, ПарольАдминистратораКластера);

	Если НЕ ЗначениеЗаполнено(ДанныеПоСеансам) Тогда
		Возврат;
	КонецЕсли;

	Кластер 	= ДанныеПоСеансам.Кластер;
	СеансыБазы 	= ДанныеПоСеансам.Сеансы;

	Лог.Информация("Количество сеансов: %1", СеансыБазы.Количество());

	Для Каждого Сеанс Из СеансыБазы Цикл
		Попытка
			Если нРег(Сеанс.AppID) = "comconsole" Тогда					
				Продолжить;
			КонецЕсли;
			ОтключитьСеанс(Агент, Кластер, Сеанс);
		Исключение
			Лог.Ошибка(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтключитьСеанс(Агент, Кластер, Знач Сеанс)

	Агент.TerminateSession(Кластер, Сеанс);
	Лог.Информация("Сеанс %1 %2 отключен.", Сеанс.UserName, Сеанс.AppID);

КонецПроцедуры

Процедура ОтключитьСоединенияСРабочимиПроцессами(Агент, Кластер, ИмяБазы, ИмяАдминистратораКластера, ПарольАдминистратораКластера)

	Попытка		
		Лог.Отладка("Получаю список рабочих процессов.");

		Если ЗначениеЗаполнено(ИмяАдминистратораКластера) И ЗначениеЗаполнено(ПарольАдминистратораКластера) Тогда
			Агент.Authenticate(Кластер, ИмяАдминистратораКластера, ИмяАдминистратораКластера);
		ИначеЕсли ЗначениеЗаполнено(ИмяАдминистратораКластера) Тогда
			Агент.Authenticate(Кластер, ИмяАдминистратораКластера, "");
		Иначе 
			Агент.Authenticate(Кластер, "", "");
		КонецЕсли;

		Лог.Отладка("Пройдена аутентификация.");

		Процессы = Агент.GetWorkingProcesses(Кластер);

		Шаблон 	 		= Процессы.CreateInfoBaseInfo();
		Шаблон.Name 	= ИмяБазы;
		СоединенияБазы 	= Процессы.GetInfoBaseConnections(Шаблон); 

		Лог.Информация("Количество соединений: %1", СоединенияБазы.Количество());

		Для Каждого Соединение Из СоединенияБазы Цикл
			//Если нРег(Соединение.Application) = "backgroundjob" ИЛИ нРег(Соединение.Application) = "designer" Тогда
			// если это соединение конфигуратора или фонового задания, то не отключаем
			
			//Если нРег(Соединение.AppID) = "designer" Тогда 
			//	Продолжить;
			//КонецЕсли;

			//Если мСоединение.UserName = ИмяПользователя() Тогда
			//	// это текущий пользователь
			//	Продолжить;
			//КонецЕсли;
			Процессы.Disconnect(Соединение);
			Лог.Информация("Соединение %1 %2 отключено.", Соединение.UserName, Соединение.AppID);
		КонецЦикла;

	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

Процедура ПрочитатьФайлНастроек() Экспорт

	МенеджерПараметров = Новый МенеджерПараметров();
	МенеджерПараметров.УстановитьФайлПараметров(ПутьКФайлуНастроек);
	МенеджерПараметров.ИспользоватьПровайдерJSON();
	МенеджерПараметров.ИспользоватьПровайдерYAML();
	МенеджерПараметров.КонструкторПараметров(ЭтотОбъект);
	
	Лог.Отладка("Чтение файла настроек начато");
	МенеджерПараметров.Прочитать();
	Лог.Отладка("Чтение файла настроек завершено");

КонецПроцедуры

#КонецОбласти

#Область Интерфейс_конструктора_параметров

Функция Параметры() Экспорт
	Возврат Параметры;
КонецФункции

Процедура УстановитьПараметры(Знач ВходящиеПараметры) Экспорт
	Параметры = ВходящиеПараметры;
КонецПроцедуры

Процедура ОписаниеПараметров(Знач Конструктор) Экспорт

	НастройкиПоУмолчанию = Конструктор.НовыеПараметры("Параметры");

	НастройкиПоУмолчанию = Конструктор.НовыеПараметры("Параметры")
						.ПолеСтрока("СтрокаПодключенияКБазе ibconnection --ibconnection", СтрокаПодключенияКБазе)
						.ПолеСтрока("АдминистраторКластера db-user --db-user", АвторизацияНаКластереСерверов.АдминистраторКластера)
						.ПолеСтрока("ПарольАдминистратораКластера db-pwd --db-pwd", АвторизацияНаКластереСерверов.ПарольАдминистратораКластера)
						.ПолеЧисло("КоличествоПопыток try --try", КоличествоПопытокОтключения)
						.ПолеБулево("БлокироватьСеансы lock --lock", БлокироватьСеансы)
						.ПолеСтрока("КодРазрешенияЗапуска uccode --uccode", КодРазрешенияЗапуска)
						.ПолеСтрока("СообщениеБлокировки lockmessage --lockmessage", СообщениеБлокировки)
						.ПолеСтрока("ВремяСтартаБлокировки lockstart --lockstart", ВремяСтартаБлокировки)
						.ПолеСтрока("ВремяОкончанияБлокировки lockend --lockend", ВремяОкончанияБлокировки)
						;
	
	Конструктор.ПолеОбъект("НастройкиПоУмолчанию default", НастройкиПоУмолчанию);

КонецПроцедуры

#КонецОбласти

#Область Служебные_процедуры_и_функции

// После перехода на 8.3 поддержку 8.2 убрать в топку
Функция ПолучитьВариантЗапускаОтключения()

	Если ТекущаяВерсияПлатформы = Неопределено Тогда
		Возврат "8.3";
	КонецЕсли;

	Возврат Лев(ТекущаяВерсияПлатформы, 3);

КонецФункции

Функция УбратьКавычкиВокругПути(Знач Путь) Экспорт
	//NOTICE: https://github.com/xDrivenDevelopment/precommit1c 
	//Apache 2.0 
	ОбработанныйПуть = Путь;

	Если Лев(ОбработанныйПуть, 1) = """" Тогда
		ОбработанныйПуть = Прав(ОбработанныйПуть, СтрДлина(ОбработанныйПуть) - 1);
	КонецЕсли;
	Если Прав(ОбработанныйПуть, 1) = """" Тогда
		ОбработанныйПуть = Лев(ОбработанныйПуть, СтрДлина(ОбработанныйПуть) - 1);
	КонецЕсли;
	
	Возврат ОбработанныйПуть;
	
КонецФункции

Функция СтрокаКоннекта(Знач СтрокаПодключения)
	Результат = "";
	Если Врег(Лев(СтрокаПодключения, 2)) = "/F" Тогда
		//Connect=File="/home/evgensosna/projects/land/build/ib";
		//Кавычки убираем два раза, вдруг кавычки в кавычках. 
		СтрокаПредварительно = УбратьКавычкиВокругПути(Сред(СтрокаПодключения,3, СтрДлина(СтрокаПодключения)-2));
		СтрокаПредварительно = СтрЗаменить(СтрокаПредварительно, "/", ПолучитьРазделительПути());
		СтрокаПредварительно = СтрЗаменить(СтрокаПредварительно, "\", ПолучитьРазделительПути());
		СтрокаПредварительно = Новый Файл(СтрокаПредварительно).ПолноеИмя;
		Результат = "File=""" + СтрокаПредварительно + """";
	ИначеЕсли Врег(Лев(СтрокаПодключения, 2)) = "/S" Тогда
		//Connect=Srvr="serverssl.service.th.consul";Ref="ssl";
		РезультатПромежуточный = УбратьКавычкиВокругПути(
				УбратьКавычкиВокругПути(Сред(СтрокаПодключения,3))
				);
		Разделитель = ?(Найти(Результат, "/")>0, "/", "\");
		МассивПодключения = 
			СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(РезультатПромежуточный, Разделитель);
		Если МассивПодключения.Количество() = 2 Тогда 
			Результат = СтрШаблон("Srvr=""%1"";Ref=""%2"";", МассивПодключения[0], МассивПодключения[1]);
		КонецЕсли;
	ИначеЕсли Врег(Лев(СтрокаПодключения, 7)) = "Connect" Тогда
		Результат = СтрокаПодключения;
	КонецЕсли;
	Возврат Результат;
КонецФункции // СтрокаКоннекта(Знач СтрокаПодключения)

Функция РазложитьСтрокуПодлючения(Знач СтрокаПодключения)

	Лог.Отладка("Определение параметров подключения.");
	ПортСервера = Неопределено;

	Если Лев(СтрокаПодключения, 2) = "/S" Тогда
		
		МассивСтрокИзСтрокиПодключения = СтроковыеФункции.РазложитьСтрокуВМассивСлов(СтрокаПодключения, "\");

		Если МассивСтрокИзСтрокиПодключения.Количество() <> 2 Тогда
			ВызватьИсключение "Ошибка преобразования строки подключения.";
		КонецЕсли;

		ПолноеИмяСервера 	= Прав(МассивСтрокИзСтрокиПодключения[0], СтрДлина(МассивСтрокИзСтрокиПодключения[0]) - 2);
		ИмяБазы				= МассивСтрокИзСтрокиПодключения[1];

		МассивСтрокИзИмениСервера = СтроковыеФункции.РазложитьСтрокуВМассивСлов(ПолноеИмяСервера, ":");

		Если МассивСтрокИзИмениСервера.Количество() = 2 Тогда
			ИмяСервера = МассивСтрокИзИмениСервера[0];
			ПортСервера = МассивСтрокИзИмениСервера[1];
		Иначе
			ИмяСервера = ПолноеИмяСервера;
		КонецЕсли;

		Лог.Отладка("ПолноеИмяСервера: " + ПолноеИмяСервера);
		Лог.Отладка("ИмяСервера: " + ИмяСервера);
		Лог.Отладка("ПортСервера: " + ПортСервера);
		Лог.Отладка("ИмяБазы: " + ИмяБазы);

	Иначе
		ВызватьИсключение "Доступен только клиент-серверный режим.";	
	КонецЕсли;
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("ПолноеИмяСервера", ПолноеИмяСервера);
	ПараметрыПодключения.Вставить("ИмяСервера", ИмяСервера);
	ПараметрыПодключения.Вставить("ПортСервера", ПортСервера);
	ПараметрыПодключения.Вставить("ИмяБазы", ИмяБазы);

	Возврат ПараметрыПодключения;

КонецФункции

Функция ПолучитьПутьКVrunner()
	КаталогПрограммы = КаталогПрограммы();
	КаталогБиблиотек = СтрЗаменить(КаталогПрограммы, "bin", "lib");
	Лог.Отладка("Путь к каталогу библиотек OneScript: %1", КаталогБиблиотек);

	ПутьКVrunner = ОбъединитьПути(КаталогБиблиотек, "vanessa-runner\src\main.os");

	Если НЕ (Новый Файл(ПутьКVrunner)).Существует() Тогда
		ВызватьИсключение "Не найден vrunner.";
	КонецЕсли;

	Возврат ПутьКVrunner;
КонецФункции

#КонецОбласти

Процедура ПриСозданииОбъекта()

	АвторизацияНаКластереСерверов = Новый Структура;
	Лог = ПараметрыПриложения.Лог();

КонецПроцедуры