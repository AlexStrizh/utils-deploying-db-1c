Перем Лог;

Процедура ОписаниеКоманды(Команда) Экспорт

	Команда.Опция("b ibconnection", "", "информационная база данных (???)")
					.ТСтрока()
					.ВОкружении("CU_KICK_IB CU_KICK_IBCONNECTION");

	Команда.Опция("u db-user", "", "пользователь (с правом администрирования кластера серверов)")
	 				.ТСтрока()
	 				.ВОкружении("CU_KICK_CLUSTER_USER");

	Команда.Опция("p db-pwd", "", "пароль пользователя (с правом администрирования кластера серверов)")
	 				.ТСтрока()
					.ВОкружении("CU_KICK_CLUSTER_PASSWORD CU_KICK_CLUSTER_PWD");
					 
	Команда.Опция("t try", "", "число попыток отключения пользователя от информационной базы данных")
	 				.ТЧисло()
	 				.ВОкружении("CU_KICK_TRY")
	 				.ПоУмолчанию(3);
	
	Команда.Аргумент("CONFIG", "", "путь к файлу настройки подключений")
						.ТСтрока()
						.ВОкружении("CU_KICK_CONFIG")
						.Обязательный(Ложь)
						.ПоУмолчанию(ПараметрыПриложения.ПолучитьПолноеИмяКФайлуНастроекПодключения());

	Команда.Спек = "CONFIG | (-b [-u -p -t]) | (-b [-u -p -t] CONFIG)";

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт

	Лог.Информация("Начало выполнение команды <kick>");

	ПутьКФайлуНастроек = Команда.ЗначениеАргумента("CONFIG");
	
	Лог.Отладка(ПутьКФайлуНастроек);

	ИБ									= Команда.ЗначениеОпции("ibconnection");
	АдминистраторКластера				= Команда.ЗначениеОпции("db-user");
	ПарольАдминистратораКластера		= Команда.ЗначениеОпции("db-pwd");

	ЧислоПопыток						= Команда.ЗначениеОпции("try");

	Лог.Отладка("Установлена опция ibconnection <%1>", ИБ);
	Лог.Отладка("Установлена опция db-user <%1>", АдминистраторКластера);
	Лог.Отладка("Установлена опция db-pwd <%1>", ПарольАдминистратораКластера);
	Лог.Отладка("Установлена опция try <%1>", ЧислоПопыток);

						
	

	ФайлНастроек = Новый Файл(ПутьКФайлуНастроек);
	Если Не ФайлНастроек.Существует() Тогда
			ВызватьИсключение Новый ИнформацияОбОшибке(СтрШаблон("Файл настроек <%1> не найден"), "Работа приложения остановлена");
	КонецЕсли;
	
	// ПутьКХранилищу			= Команда.ЗначениеАргумента("PATH");
	// КаталогРабочейКопии		= Команда.ЗначениеАргумента("WORKDIR");
	
	// ПользовательХранилища		= Команда.ЗначениеОпции("--storage-user");
	// ПарольПользователяХранилища	= Команда.ЗначениеОпции("--storage-pwd");

	// ФайлКаталогРабочейКопии = Новый Файл(КаталогРабочейКопии);
	// КаталогРабочейКопии = ФайлКаталогРабочейКопии.ПолноеИмя;

	// Лог.Отладка("ПутьКХранилищу = " + ПутьКХранилищу);
	// Лог.Отладка("КаталогРабочейКопии = " + КаталогРабочейКопии);

	// МассивФайлов = НайтиФайлы(КаталогРабочейКопии, "src");
	// КаталогИсходников = КаталогРабочейКопии;
	// Если МассивФайлов.Количество() > 0  Тогда
	// 	КаталогИсходников = МассивФайлов[0].ПолноеИмя;
	// КонецЕсли;

	// ОбщиеПараметры = ПараметрыПриложения.Параметры();
	// МенеджерПлагинов = ОбщиеПараметры.УправлениеПлагинами;
	
	// ИндексПлагинов = МенеджерПлагинов.ПолучитьИндексПлагинов();

	// Распаковщик = Новый МенеджерСинхронизации();
	// Распаковщик.ВерсияПлатформы(ОбщиеПараметры.ВерсияПлатформы)
	// 		   .ДоменПочтыПоУмолчанию(ОбщиеПараметры.ДоменПочты)
	// 		   .ИсполняемыйФайлГит(ОбщиеПараметры.ПутьКГит)
	// 		   .ПодпискиНаСобытия(ИндексПлагинов)
	// 		   .ПараметрыПодписокНаСобытия(Команда.ПараметрыКоманды())
	// 		   .УровеньЛога(ПараметрыПриложения.УровеньЛога())
	// 		   .АвторизацияВХранилищеКонфигурации(ПользовательХранилища, ПарольПользователяХранилища)
	// 		   .Синхронизировать(КаталогИсходников, ПутьКХранилищу);

	// Лог.Информация("Завершено выполнение команды <sync>");
		
КонецПроцедуры

Лог = ПараметрыПриложения.Лог();